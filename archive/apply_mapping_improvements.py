#!/usr/bin/env python3
"""
Apply Mapping Improvements

This script applies the improved semantic mappings generated by the SemanticMappingReviewer
to the main word-to-emoji and emoji-to-word mapping files.
"""

import json
import logging
from pathlib import Path
import shutil
from typing import Dict
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class MappingApplier:
    def __init__(self):
        """Initialize the mapping applier"""
        self.word_to_emoji_path = Path("mappings/word_to_emoji.json")
        self.emoji_to_word_path = Path("mappings/emoji_to_word.json")
        self.backup_dir = Path("mappings/backups")
        self.backup_dir.mkdir(exist_ok=True)
    
    def backup_current_mappings(self):
        """Create backup of current mapping files"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # Backup word-to-emoji
        if self.word_to_emoji_path.exists():
            backup_path = self.backup_dir / f"word_to_emoji_backup_{timestamp}.json"
            shutil.copy2(self.word_to_emoji_path, backup_path)
            logger.info(f"Backed up word-to-emoji to {backup_path}")
        
        # Backup emoji-to-word
        if self.emoji_to_word_path.exists():
            backup_path = self.backup_dir / f"emoji_to_word_backup_{timestamp}.json"
            shutil.copy2(self.emoji_to_word_path, backup_path)
            logger.info(f"Backed up emoji-to-word to {backup_path}")
        
        return timestamp
    
    def load_current_mappings(self):
        """Load current mapping files"""
        word_to_emoji = {}
        emoji_to_word = {}
        
        try:
            with open(self.word_to_emoji_path, 'r', encoding='utf-8') as f:
                word_to_emoji = json.load(f)
            logger.info(f"Loaded {len(word_to_emoji)} current word-to-emoji mappings")
        except FileNotFoundError:
            logger.warning("word_to_emoji.json not found")
        
        try:
            with open(self.emoji_to_word_path, 'r', encoding='utf-8') as f:
                emoji_to_word = json.load(f)
            logger.info(f"Loaded {len(emoji_to_word)} current emoji-to-word mappings")
        except FileNotFoundError:
            logger.warning("emoji_to_word.json not found")
        
        return word_to_emoji, emoji_to_word
    
    def apply_improvements(self, improved_mappings: Dict[str, str], dry_run: bool = False):
        """Apply the improved mappings to the files"""
        if not improved_mappings:
            logger.info("No improvements to apply")
            return
        
        logger.info(f"Applying {len(improved_mappings)} improved mappings...")
        
        # Load current mappings
        word_to_emoji, emoji_to_word = self.load_current_mappings()
        
        changes_made = 0
        
        for word, new_emoji_str in improved_mappings.items():
            if word in word_to_emoji:
                old_emoji_str = word_to_emoji[word]
                
                if old_emoji_str != new_emoji_str:
                    if not dry_run:
                        # Remove old reverse mapping
                        if old_emoji_str in emoji_to_word:
                            del emoji_to_word[old_emoji_str]
                        
                        # Update word-to-emoji mapping
                        word_to_emoji[word] = new_emoji_str
                        
                        # Add new reverse mapping
                        emoji_to_word[new_emoji_str] = word
                    
                    changes_made += 1
                    logger.info(f"{'[DRY RUN] ' if dry_run else ''}Updated '{word}': {old_emoji_str} → {new_emoji_str}")
            else:
                logger.warning(f"Word '{word}' not found in current mappings")
        
        if not dry_run and changes_made > 0:
            # Save updated mappings
            with open(self.word_to_emoji_path, 'w', encoding='utf-8') as f:
                json.dump(word_to_emoji, f, indent=2, ensure_ascii=False)
            
            with open(self.emoji_to_word_path, 'w', encoding='utf-8') as f:
                json.dump(emoji_to_word, f, indent=2, ensure_ascii=False)
            
            logger.info(f"✅ Successfully applied {changes_made} mapping improvements")
        elif dry_run:
            logger.info(f"[DRY RUN] Would apply {changes_made} mapping improvements")
        else:
            logger.info("No changes needed")
        
        return changes_made
    
    def load_improved_mappings(self, improvements_file: Path) -> Dict[str, str]:
        """Load improved mappings from JSON file"""
        try:
            with open(improvements_file, 'r', encoding='utf-8') as f:
                improved_mappings = json.load(f)
            logger.info(f"Loaded {len(improved_mappings)} improved mappings from {improvements_file}")
            return improved_mappings
        except FileNotFoundError:
            logger.error(f"Improvements file not found: {improvements_file}")
            return {}
        except json.JSONDecodeError as e:
            logger.error(f"Invalid JSON in improvements file: {e}")
            return {}

def main():
    """Main function for command-line usage"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Apply improved semantic mappings")
    parser.add_argument("--improvements", "-i", 
                       default="mapping_reviews/improved_mappings.json",
                       help="Path to improved mappings JSON file")
    parser.add_argument("--dry-run", "-d", action="store_true",
                       help="Show what would be changed without making changes")
    parser.add_argument("--no-backup", action="store_true",
                       help="Skip creating backup files")
    
    args = parser.parse_args()
    
    try:
        applier = MappingApplier()
        
        # Load improved mappings
        improvements_file = Path(args.improvements)
        improved_mappings = applier.load_improved_mappings(improvements_file)
        
        if not improved_mappings:
            print("❌ No improved mappings found")
            return 1
        
        # Create backup unless skipped
        if not args.no_backup and not args.dry_run:
            backup_timestamp = applier.backup_current_mappings()
            print(f"📂 Created backup with timestamp: {backup_timestamp}")
        
        # Apply improvements
        changes_made = applier.apply_improvements(improved_mappings, dry_run=args.dry_run)
        
        if args.dry_run:
            print(f"\n🔍 Dry run complete - {changes_made} changes would be applied")
            print("Run without --dry-run to apply the changes")
        elif changes_made > 0:
            print(f"\n✅ Successfully applied {changes_made} mapping improvements!")
            print("🔄 You may want to rebuild any cached indexes or restart applications")
        else:
            print("\nℹ️  No changes were needed")
        
        return 0
        
    except Exception as e:
        logger.error(f"Error applying improvements: {e}")
        return 1

if __name__ == "__main__":
    exit(main())
